/*! \file  faspxx_functs.h
 *
 *  \brief Function decoration for the FASP++ package
 *
 *---------------------------------------------------------------------------------
 *  Copyright (C) 2024--Present by the FASP++ team. All rights reserved.           
 *  Released under the terms of the GNU Lesser General Public License 3.0 or later.
 *---------------------------------------------------------------------------------
 *
 *  \warning DO NOT EDIT!!! This file is automatically generated!
 */ 

#include "faspxx.h" 
 

/*-------- In file: AuxArray.c --------*/

void faspxx_darray_set(const INT n, DBL* x, const DBL val);

void faspxx_iarray_set(const INT n, INT* x, const INT val);

void faspxx_darray_cp(const INT n, const DBL* x, DBL* y);

void faspxx_iarray_cp(const INT n, const INT* x, INT* y);


/*-------- In file: AuxMemory.c --------*/

void* faspxx_mem_calloc(const unsigned int size, const unsigned int type);

void* faspxx_mem_realloc(void* oldmem, const LONGLONG tsize);

void faspxx_mem_free(void* mem);

void faspxx_mem_usage(void);


/*-------- In file: AuxMessage.c --------*/

void faspxx_itinfo(const INT ptrlvl, const INT stop_type, const INT iter,
                   const DBL relres, const DBL absres, const DBL factor);

void faspxx_cputime(const char* message, const DBL cputime);

void faspxx_message(const INT ptrlvl, const char* message);

void faspxx_chkerr(const SHORT status, const char* fctname);


/*-------- In file: AuxSort.c --------*/

INT faspxx_aux_BiSearch(const INT nlist, const INT* list, const INT value);

INT faspxx_aux_unique(INT numbers[], const INT size);

void faspxx_aux_merge(INT numbers[], INT work[], INT left, INT mid, INT right);

void faspxx_aux_msort(INT numbers[], INT work[], INT left, INT right);

void faspxx_aux_iQuickSort(INT* a, INT left, INT right);

void faspxx_aux_dQuickSort(DBL* a, INT left, INT right);

void faspxx_aux_iQuickSortIndex(INT* a, INT left, INT right, INT* index);

void faspxx_aux_dQuickSortIndex(DBL* a, INT left, INT right, INT* index);


/*-------- In file: AuxThreads.c --------*/

INT faspxx_get_num_threads(void);

INT faspxx_set_num_threads(const INT nthreads);

void faspxx_get_start_end(const INT procid, const INT nprocs, const INT n, INT* start,
                          INT* end);


/*-------- In file: AuxVector.c --------*/

dvector faspxx_dvec_create(const INT m);

ivector faspxx_ivec_create(const INT m);

void faspxx_dvec_alloc(const INT m, dvector* u);

void faspxx_ivec_alloc(const INT m, ivector* u);

void faspxx_dvec_free(dvector* u);

void faspxx_ivec_free(ivector* u);

void faspxx_dvec_rand(const INT n, dvector* x);

void faspxx_dvec_set(INT n, dvector* x, const DBL val);

void faspxx_ivec_set(INT n, ivector* u, const INT m);

void faspxx_dvec_cp(const dvector* x, dvector* y);

DBL faspxx_dvec_maxdiff(const dvector* x, const dvector* y);

void faspxx_dvec_symdiagscale(dvector* b, const dvector* diag);

BOOL faspxx_dvec_isnan(const dvector* u);


/*-------- In file: BlaFormat.c --------*/

SHORT faspxx_format_dcoo_dcsr(const dCOOmat* A, dCSRmat* B);

SHORT faspxx_format_dcsr_dcoo(const dCSRmat* A, dCOOmat* B);


/*-------- In file: BlaIO.c --------*/

void faspxx_dcsr_read(const char* filename, dCSRmat* A);

void faspxx_dcoo_read(const char* filename, dCSRmat* A);

void faspxx_dmtx_read(const char* filename, dCSRmat* A);

void faspxx_dmtxsym_read(const char* filename, dCSRmat* A);

void faspxx_dvec_read(const char* filename, dvector* b);

void faspxx_dcoo_write(const char* filename, dCSRmat* A);

void faspxx_dvec_write(const char* filename, dvector* vec);

void faspxx_ivec_write(const char* filename, ivector* vec);

void faspxx_dvec_print(const INT n, dvector* u);

void faspxx_ivec_print(const INT n, ivector* u);

void faspxx_dcsr_print(const dCSRmat* A);

void faspxx_dcoo_print(const dCOOmat* A);

void faspxx_dcsr_write_coo(const char* filename, const dCSRmat* A);


/*-------- In file: BlaSparseCOO.c --------*/

dCOOmat faspxx_dcoo_create(const INT m, const INT n, const INT nnz);

void faspxx_dcoo_alloc(const INT m, const INT n, const INT nnz, dCOOmat* A);

void faspxx_dcoo_free(dCOOmat* A);


/*-------- In file: BlaSparseCSR.c --------*/

dCSRmat faspxx_dcsr_create(const INT m, const INT n, const INT nnz);

void faspxx_dcsr_alloc(const INT m, const INT n, const INT nnz, dCSRmat* A);

void faspxx_dcsr_free(dCSRmat* A);

void faspxx_dcsr_sort(dCSRmat* A);

void faspxx_dcsr_getdiag(INT n, const dCSRmat* A, dvector* diag);

void faspxx_dcsr_diagpref(dCSRmat* A);

void faspxx_dcsr_cp(const dCSRmat* A, dCSRmat* B);

INT faspxx_dcsr_trans(const dCSRmat* A, dCSRmat* AT);

void faspxx_dcsr_compress(const dCSRmat* A, dCSRmat* B, const DBL dtol);

SHORT faspxx_dcsr_compress_inplace(dCSRmat* A, const DBL dtol);

 
/* End of faspxx_functs.h */
